// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MiddlewareTestbed.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package MiddlewareTestbed;

public final class ItemPrxHelper extends Ice.ObjectPrxHelperBase implements ItemPrx
{
    private static final String __get_item_age_name = "get_item_age";

    public int get_item_age()
    {
        return get_item_age(null, false);
    }

    public int get_item_age(java.util.Map<String, String> __ctx)
    {
        return get_item_age(__ctx, true);
    }

    private int get_item_age(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "get_item_age", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("get_item_age");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    return __del.get_item_age(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_get_item_age()
    {
        return begin_get_item_age(null, false, null);
    }

    public Ice.AsyncResult begin_get_item_age(java.util.Map<String, String> __ctx)
    {
        return begin_get_item_age(__ctx, true, null);
    }

    public Ice.AsyncResult begin_get_item_age(Ice.Callback __cb)
    {
        return begin_get_item_age(null, false, __cb);
    }

    public Ice.AsyncResult begin_get_item_age(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_get_item_age(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_get_item_age(Callback_Item_get_item_age __cb)
    {
        return begin_get_item_age(null, false, __cb);
    }

    public Ice.AsyncResult begin_get_item_age(java.util.Map<String, String> __ctx, Callback_Item_get_item_age __cb)
    {
        return begin_get_item_age(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_get_item_age(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__get_item_age_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __get_item_age_name, __cb);
        try
        {
            __result.__prepare(__get_item_age_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_get_item_age(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __get_item_age_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __name_name = "name";

    public String name()
    {
        return name(null, false);
    }

    public String name(java.util.Map<String, String> __ctx)
    {
        return name(__ctx, true);
    }

    private String name(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "name", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("name");
                    __delBase = __getDelegate(false);
                    _ItemDel __del = (_ItemDel)__delBase;
                    return __del.name(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_name()
    {
        return begin_name(null, false, null);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx)
    {
        return begin_name(__ctx, true, null);
    }

    public Ice.AsyncResult begin_name(Ice.Callback __cb)
    {
        return begin_name(null, false, __cb);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_name(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_name(Callback_Item_name __cb)
    {
        return begin_name(null, false, __cb);
    }

    public Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, Callback_Item_name __cb)
    {
        return begin_name(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_name(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__name_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __name_name, __cb);
        try
        {
            __result.__prepare(__name_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_name(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __name_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ItemPrxHelper __h = new ItemPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ItemPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ItemPrx)
            {
                __d = (ItemPrx)__obj;
            }
            else
            {
                ItemPrxHelper __h = new ItemPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ItemPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ItemPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ItemPrxHelper __h = new ItemPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::MiddlewareTestbed::Item"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ItemDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ItemDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ItemPrx v)
    {
        __os.writeProxy(v);
    }

    public static ItemPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ItemPrxHelper result = new ItemPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
